---
title: "R Screencasts"
description: "Awesome data analysis screencasts from a top Data Scientist" 
listing:
  contents: content_pages
  sort:
    - "title"
    - "date"
  sort-ui: [title, date]
---

```{r setup, include = FALSE}
library(magrittr)
library(dplyr)
library(googlesheets4)
library(janitor)
library(stringr)
library(glue)
```

```{r load, include = FALSE, cache = TRUE}
gs4_deauth()

screencasts_data_google <- read_sheet("https://docs.google.com/spreadsheets/d/1pjj_G9ncJZPGTYPkR1BYwzA6bhJoeTfY2fJeGKSbOKM/edit#gid=444382177", sheet = "Summary")

timestamps_data_google <- read_sheet("https://docs.google.com/spreadsheets/d/1pjj_G9ncJZPGTYPkR1BYwzA6bhJoeTfY2fJeGKSbOKM/edit#gid=444382177", sheet = "Screencasts")

screencasts_data <- screencasts_data_google %>% 
  clean_names() %>% 
  filter(complete == "x") %>% 
  arrange(screencast) %>% 
  # regex is (?<=) positive assertion, means look after this match, then the additional = is the things to match,and .+ is all characters except whitespace 
  mutate(vid_key = str_extract(screencast_url, "(?<==).+")) %>% 
  identity() 

screencasts_count <- screencasts_data %>% 
  distinct(screencast) %>% 
  count() %>% 
  pull()

timestamps_data <- timestamps_data_google %>% 
  clean_names()
```

If you're looking for real-world examples of live data analyses, you've come to the right place.

David Robinson, a highly experienced Data Scientist, has recorded many screencasts where he analyses data that he's never seen before. These are fantastic examples of how to think about approaching an analysis.

The recordings were done as part of a weekly R programming challenge called TidyTuesday. All code is shared and all datasets are publicly available.

> You couldn't ask for a better mentor!

In each video you'll learn:

- How to approach the analysis

- What packages and methods he's using, and why

- Handy R tips and tricks

- How to get unstuck when something doesn't lead anywhere   

This is a wealth of knowledge for new and experienced analysts alike. 

Use the search bar to look for specific functions, packages or other keywords. 

Below you'll find a list of `r screencasts_count`  time-stamped screencasts.

````{r create_pages, echo=FALSE, results='asis'}

for (entry_screencast in row.names(screencasts_data)) {
 
  topic <- as.character(screencasts_data[entry_screencast, "screencast"])
  #not using a dplyr filter considtion, because it causes the render to fail for some 
  #reason with the error "cannot find the specified file"
  timestamps_entries <- subset(timestamps_data, screencast==topic)
  topic_timestamps <- timestamps_entries[, c("timestamp_with_hours", "description", "functions", "packages", "timestamp_sec")]
  
  badgify <- function(class) {
    class <- paste(class, switch(
      class,
      functions = "badge bg-info",
      packages = "badge bg-primary"
    ))
    function(x) {
      if (is.na(x)) return("")
      x <- strsplit(x, "\\s*\\|\\s*")[[1]]
      paste(sprintf('<span class="badge-%s mx-1">%s</span>', class, x), collapse = "")
    }
  }
  
  for (badge in c("functions", "packages")) {
    topic_timestamps[[badge]] <- purrr::map_chr(topic_timestamps[[badge]], badgify(badge))
  }
  
  topic_timestamps$description <- purrr::map_chr(
    topic_timestamps$description,
    commonmark::markdown_html
  )

  timestamp_sections <- glue::glue_data(
    topic_timestamps,
    .na = "",
    '<div class="topic">
    <h3><a onClick="playerSkipToTimestamp({ timestamp_sec })" href="#full-screencast">{ timestamp_with_hours }</a></h3>
    <div class="topic_badges"><div>{ functions }</div><div>{ packages }</div></div>
    <div class="topic_description">{ description }</div>
    </div>'
  )
  timestamp_sections <- paste(timestamp_sections, collapse = "\n")
  
   # this text has to be left aligned for it to work properly, otherwise it gets tabbed and is not recognised as a yaml header. Might be because of the AS IS argument
   content_text <- glue::glue_data(
     screencasts_data[entry_screencast, ],
     .open = "{{",
     .close = "}}",
'
---
title: |
  {{ screencast }}
description: |
  {{ notable_topics }}
date: {{ strftime(date, "%F") }}
date-format: long
---

Notable topics: {{ notable_topics }}

Recorded on: {{ strftime(date, "%F") }}

Timestamps by: {{ contributor }}

[View code]({{ browse_r_code_url }})

## Full screencast

<div id="yt-player" data-video-id="{{ vid_key }}"></div>

## Timestamps

```{=html}
<div id="topics">{{ timestamp_sections }}</div>
```
     
<script>
// 2. This code loads the IFrame Player API code asynchronously.
var tag = document.createElement("script");

tag.src = "https://www.youtube.com/iframe_api";
var firstScriptTag = document.getElementsByTagName("script")[0];
firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

// 3. This function creates an <iframe> (and YouTube player)
//    after the API code downloads.
var videoId = document.getElementById("yt-player").dataset.videoId;
var player;
function onYouTubeIframeAPIReady() {
  player = new YT.Player("yt-player", {
    height: "486",
    width: "864",
    videoId: videoId,
    playerVars: {
      "playsinline": 1
    }
  });
}

function playerSkipToTimestamp(seconds) {
  player.seekTo(seconds, true)
}
</script>
'
)

   screencast_name <- screencasts_data[entry_screencast, ][["screencast"]]
   screencast_name <- janitor::make_clean_names(screencast_name, sep_out = "-")
   writeLines(content_text, glue("content_pages/{screencast_name}.qmd"))
}
````

## All recordings
