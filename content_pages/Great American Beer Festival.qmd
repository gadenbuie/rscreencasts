---
title: "Great American Beer Festival"
description: "Log odds ratio, Logistic regression, TIE Fighter plot"
date: 2020-10-20
date-format: long
---

Notable topics: Log odds ratio, Logistic regression, TIE Fighter plot

Recorded on: 2020-10-20

Timestamps by: Eric Fletcher

[View code](https://github.com/dgrtwo/data-screencasts/blob/master/2020_10_20_beer_awards.Rmd)

## Full screencast
<iframe width="560" height="315" src="https://www.youtube.com/embed/BV_afpCDQ70" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

## Timestamps

### 0:8:20

Use `pivot_wider` with `values_fill = list(value =0))` from the `tidyr` package along with `mutate(value = 1)` to pivot the `medal` variable from `long` to `wide` adding a 1 for the medal type awarded and 0 for the remaining medal types in the row.

pivot_wider

tidyr



<iframe width="560" height="315" src="https://www.youtube.com/embed/BV_afpCDQ70?start=500" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:11:25

Use `fct_lump` from the `forcats` package to lump together all the beers except for the N most frequent.

fct_lump

forcats



<iframe width="560" height="315" src="https://www.youtube.com/embed/BV_afpCDQ70?start=685" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:12:25

Use `str_to_upper` from the `stringr` package to convert the case of the `state` variable to uppercase.

str_to_upper

stringr



<iframe width="560" height="315" src="https://www.youtube.com/embed/BV_afpCDQ70?start=745" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:12:25

Use `fct_relevel` from the the `forcats` package in order to reorder the `medal` factor levels.

fct_relevel

forcats



<iframe width="560" height="315" src="https://www.youtube.com/embed/BV_afpCDQ70?start=745" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:13:25

Use `fct_reorder` from the `forcats` package to sort `beer_name` factor levels by sorting along `n`.

fct_reorder

forcats



<iframe width="560" height="315" src="https://www.youtube.com/embed/BV_afpCDQ70?start=805" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:14:30

Use `glue` from the `glue` package to concatenate `beer_name` and `brewery` on the y-axis.

glue

glue



<iframe width="560" height="315" src="https://www.youtube.com/embed/BV_afpCDQ70?start=870" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:15:00

Use `ties.mthod = "first" ` within `fct_lump` to show only the first `brewery` when a tie exists between them.

fct_lump

forcats



<iframe width="560" height="315" src="https://www.youtube.com/embed/BV_afpCDQ70?start=900" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:19:25

Use `setdiff` from the `dplyr` package and the `state.abb` built in vector from the `datasets` package  to check which states are missing from the dataset.

state.abb | setdiff

datasets



<iframe width="560" height="315" src="https://www.youtube.com/embed/BV_afpCDQ70?start=1165" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:21:25

Use `summarize` from the `dplyr` package to calculate the `number of medals` with `n_medals = n()`, `number of beers` with `n_distinct`, `number of gold medals` with `sum()`, and `weighted medal totals` using `sum(as.integer()` because `medal` is an ordered factor, so 1 for each bronze, 2 for each silver, and 3 for each gold.

summarize

dplyr



<iframe width="560" height="315" src="https://www.youtube.com/embed/BV_afpCDQ70?start=1285" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:26:05

Import `Craft Beers Dataset` from `Kaggle` using `read_csv` from the `readr` package.

read_csv

readr



<iframe width="560" height="315" src="https://www.youtube.com/embed/BV_afpCDQ70?start=1565" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:28:00

Use `inner_join` from the `dplyr` package to join together the 2 datasets from `kaggle`.

inner_join

dplyr



<iframe width="560" height="315" src="https://www.youtube.com/embed/BV_afpCDQ70?start=1680" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:29:40

Use `semi_join` from the `dplyr` package to join together to see if the beer names match with the `kaggle` dataset.  Ends up at a dead end with not enough matches between the datasets.

semi_join

dplyr



<iframe width="560" height="315" src="https://www.youtube.com/embed/BV_afpCDQ70?start=1780" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:33:05

Use `bind_log_odds` from the `tidylo` package to show the representation of each beer category for each state compared to the categories across the other states.

bind_log_odds

tidylo



<iframe width="560" height="315" src="https://www.youtube.com/embed/BV_afpCDQ70?start=1985" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:33:35

Use `complete` from the `tidyr` package in order to turn missing values into explicit missing values.

complete

tidyr



<iframe width="560" height="315" src="https://www.youtube.com/embed/BV_afpCDQ70?start=2015" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:35:30

Use `reorder_within` from the `tidytext` package and `scale_y_reordered` from the `tidytext` package in order to reorder the bars within each facet panel.

reorder_within | scale_y_reordered | facet_wrap

tidytext



<iframe width="560" height="315" src="https://www.youtube.com/embed/BV_afpCDQ70?start=2130" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:36:40

Use `fct_reorder` from the `forcats` package to reorder the `facet panels` in descending order.

fct_reorder

forcats



<iframe width="560" height="315" src="https://www.youtube.com/embed/BV_afpCDQ70?start=2200" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:39:35

For the previous plot, use `fill = log_odds_weighted > 0` in the `ggplot` `aes` argument to highlight the positive and negative values.

fill

ggplot2



<iframe width="560" height="315" src="https://www.youtube.com/embed/BV_afpCDQ70?start=2375" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:41:45

Use `add_count` from the `dplyr` package to add a `year_total` variable which shows the total awards for each year. Then use this to calculate the percent change in totals medals per state using `mutate(pct_year = n / year)`

add_count | mutate

dplyr



<iframe width="560" height="315" src="https://www.youtube.com/embed/BV_afpCDQ70?start=2505" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:44:40

Use `glm` from the `stats` package to create a `logistic regression` model to find out if their is a statistical trend in the probability of award success over time.

glm | cbind

stats



<iframe width="560" height="315" src="https://www.youtube.com/embed/BV_afpCDQ70?start=2680" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:47:15

Exapnd on the previous model by using the `broom` package to fit multiple `logistic regressions` across multiple states instead of doing it for an individual state at a time.

group_by | summarize | list | glm|mutate | map

broom | purrr



<iframe width="560" height="315" src="https://www.youtube.com/embed/BV_afpCDQ70?start=2835" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:50:25

Use `conf.int = TRUE` to add `confidence bounds` to the `logistic regression` output then use it to create a `TIE Fighter` plot to show which states become more or less frequent medal winners over time.

conf.int

NA



<iframe width="560" height="315" src="https://www.youtube.com/embed/BV_afpCDQ70?start=3025" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:53:00

Use the `state.name` dataset with `match` from `base r`  to change state abbreviation to the state name.

state.name | match

datasets



<iframe width="560" height="315" src="https://www.youtube.com/embed/BV_afpCDQ70?start=3180" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:55:00

Summary of screencast.

NA

NA



<iframe width="560" height="315" src="https://www.youtube.com/embed/BV_afpCDQ70?start=3300" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

