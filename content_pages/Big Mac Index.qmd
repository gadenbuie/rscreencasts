---
title: "Big Mac Index"
description: "Data manipulation, Pairwise correlation"
date: 2020-12-22
date-format: long
---

Notable topics: Data manipulation, Pairwise correlation

Recorded on: 2020-12-22

Timestamps by: Eric Fletcher

[View code](https://github.com/dgrtwo/data-screencasts/blob/master/2020_12_22_big_mac_index.Rmd)

## Full screencast
<iframe class="video" src="https://www.youtube.com/embed/pxJ5wtxL5Kw" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

## Timestamps

### 0:5:45

Use the `add_count` function from the `dplyr` package with `name = "country_total"` to count the number of observations by group in the `name` variable.

add_count

dplyr



<iframe class="video" src="https://www.youtube.com/embed/pxJ5wtxL5Kw?start=345" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:5:55

Use `filter` from the `dplyr` package with `country_total == max(country_total)` to filter the data for countries where every data point is provided.

filter | max

dplyr | base



<iframe class="video" src="https://www.youtube.com/embed/pxJ5wtxL5Kw?start=355" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:6:30

Use the `rename` function from the `dplyr` package to rename the `name` variable to `country_name`.

rename

dplyr



<iframe class="video" src="https://www.youtube.com/embed/pxJ5wtxL5Kw?start=390" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:6:45

Use `theme(legend.position = "none")` to hide the legend generated by the `geom_line` plot.

theme

ggplot2



<iframe class="video" src="https://www.youtube.com/embed/pxJ5wtxL5Kw?start=405" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:7:00

Use the `expand_limits` function from the `ggplot2` package with `y = 0` so that each `facet panel` has a y-axis that starts at the same point, in this case 0.

expand_limits

ggplot2



<iframe class="video" src="https://www.youtube.com/embed/pxJ5wtxL5Kw?start=420" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:8:30

Reorder `facet panels` using the `fct_reorder` from the `forcats` package with a function passed in to the `.fun` argument to calculate the ratio between `max` and `min` values in the `local_price` variable.  At 12:00, David changes from using `max` and `min` to `last` and `first` to calculate the `Big Mac inflation rate`.

fct_reorder

forcats



<iframe class="video" src="https://www.youtube.com/embed/pxJ5wtxL5Kw?start=510" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:13:20

Use `scale_x_log10` from the `ggplot2` package to change the `breaks` for the `x-axis` while also applying a `log10` tranformation.

scale_x_log10

ggplot2



<iframe class="video" src="https://www.youtube.com/embed/pxJ5wtxL5Kw?start=800" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:15:05

Use `geom_text` from the from the `ggplot2` with `paste0` package to add labels to each bar in the plot indicating how many time `X` the price of a Big Mac increased from 2000 to 2020.

geom_text | paste0

ggplot2 | base



<iframe class="video" src="https://www.youtube.com/embed/pxJ5wtxL5Kw?start=905" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:28:10

Add two lines to a plot using 2 `geom_line`  with  `color =` argument and `y=` argument to distinguish between the two lines.

geom_line

ggplot2



<iframe class="video" src="https://www.youtube.com/embed/pxJ5wtxL5Kw?start=1690" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:34:05

Use `geom_hline` from the `ggplot2` package to add horizontal reference line to each facet panel.

geom_hline

ggplot2



<iframe class="video" src="https://www.youtube.com/embed/pxJ5wtxL5Kw?start=2045" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:35:40

Use `theme` from the `ggplot2` package with `axis.text.x = element_text(angle = 90, hjust = 1)` to rmake the x-axis labels horizontal in order to avoid overcrowding.

theme

ggplot2



<iframe class="video" src="https://www.youtube.com/embed/pxJ5wtxL5Kw?start=2140" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:38:25

Use `geom_text` to add country names to each point in `geom_point` plot. David then opts to use `geom_text_repel` from the `ggrepel` package instead to avoid overcrowding.

geom_text | geom_text_repel

ggplot2 | ggrepel



<iframe class="video" src="https://www.youtube.com/embed/pxJ5wtxL5Kw?start=2305" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:38:40

Use `geom_smooth` from the `ggplot2` package with `lm` smoothing method to help show the linear trend when comparing `gdp_dollar` to `usd_raw`.

geom_smooth

ggplot2



<iframe class="video" src="https://www.youtube.com/embed/pxJ5wtxL5Kw?start=2320" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:47:00

Use the `gganimate` package to animate the `GDP per capital` versus `adjusted big mac index relative to USD` over time.

transition_manual | transition_time

gganimate



<iframe class="video" src="https://www.youtube.com/embed/pxJ5wtxL5Kw?start=2820" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:53:05

Use `str_to_upper` and `str_remove` to remove `_adjusted` from `base_currency` while uppercasing the characters that remain.

str_to_upper | str_remove

stringr



<iframe class="video" src="https://www.youtube.com/embed/pxJ5wtxL5Kw?start=3185" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:58:05

Use `pairwise_cor` from the `widyr` package to perform `pairwise correlation` to figure out which countries Big Mac prices tend to move together over time.

pairwise_cor

widyr



<iframe class="video" src="https://www.youtube.com/embed/pxJ5wtxL5Kw?start=3485" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 1:00:50

Screencast summary.

NA

NA



<iframe class="video" src="https://www.youtube.com/embed/pxJ5wtxL5Kw?start=3650" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

