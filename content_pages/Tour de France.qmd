---
title: "Tour de France"
description: "Survival analysis, Animated bar graph (gganimate package)"
date: 2020-04-07
date-format: long
---

Notable topics: Survival analysis, Animated bar graph (gganimate package)

Recorded on: 2020-04-07

Timestamps by: Alex Cookson

[View code](https://github.com/dgrtwo/data-screencasts/blob/master/tour-de-france.Rmd)

## Full screencast
<iframe width="560" height="315" src="https://www.youtube.com/embed/vT-DElIaKtE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

## Timestamps

### 0:3:55

Getting an overview of the data

NA

NA



<iframe width="560" height="315" src="https://www.youtube.com/embed/vT-DElIaKtE?start=235" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:8:55

Aggregating data into decades using the truncated division operator %/%

%/%

NA



<iframe width="560" height="315" src="https://www.youtube.com/embed/vT-DElIaKtE?start=535" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:21:50

Noting that death data is right-censored (i.e., some winners are still alive)

NA

NA



<iframe width="560" height="315" src="https://www.youtube.com/embed/vT-DElIaKtE?start=1310" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:24:05

Using transmute function, which combines functionality of mutate (to create new variables) and select (to choose variables to keep)

transmute

NA



<iframe width="560" height="315" src="https://www.youtube.com/embed/vT-DElIaKtE?start=1445" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:25:30

Using survfit function from survival package to conduct survival analysis

survfit

survival



<iframe width="560" height="315" src="https://www.youtube.com/embed/vT-DElIaKtE?start=1530" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:27:30

Using glance function from broom package to get a one-row model summary of the survival model

glance

broom



<iframe width="560" height="315" src="https://www.youtube.com/embed/vT-DElIaKtE?start=1650" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:31:00

Using extract function to pull out a string matching a regular expression from a variable (stage number in this case)

extract

NA



<iframe width="560" height="315" src="https://www.youtube.com/embed/vT-DElIaKtE?start=1860" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:34:30

Theorizing that there is a parsing issue with the original data's time field

NA

NA



<iframe width="560" height="315" src="https://www.youtube.com/embed/vT-DElIaKtE?start=2070" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:41:15

Using group_by function's built-in "peeling" feature, where a summarise call will "peel away" one group but left other groupings intact

group_by

NA



<iframe width="560" height="315" src="https://www.youtube.com/embed/vT-DElIaKtE?start=2475" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:42:05

Using rank function, then upgrading to percent_rank function to give percentile rankings (between 0 and 1)

rank | percent_rank

NA



<iframe width="560" height="315" src="https://www.youtube.com/embed/vT-DElIaKtE?start=2525" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:47:50

Using geom_smooth function with method argument as "lm" to plot a linear regression

geom_smooth

NA



<iframe width="560" height="315" src="https://www.youtube.com/embed/vT-DElIaKtE?start=2870" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:48:10

Using cut function to bin numbers (percentiles in this case) into categories

cut

NA



<iframe width="560" height="315" src="https://www.youtube.com/embed/vT-DElIaKtE?start=2890" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:50:25

Reviewing boxplots exploring relationship between first-stage performance and overall Tour performance

NA

NA



<iframe width="560" height="315" src="https://www.youtube.com/embed/vT-DElIaKtE?start=3025" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:51:30

Starting to create an animation using gganimate package

NA

gganimate



<iframe width="560" height="315" src="https://www.youtube.com/embed/vT-DElIaKtE?start=3090" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:56:00

Actually writing the code to create the animation

NA

NA



<iframe width="560" height="315" src="https://www.youtube.com/embed/vT-DElIaKtE?start=3360" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:58:20

Using reorder_within function from tidytext package to re-order factors that have the same name across multiple groups

reorder_within

tidytext



<iframe width="560" height="315" src="https://www.youtube.com/embed/vT-DElIaKtE?start=3500" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 1:02:40

Summary of screencast

NA

NA



<iframe width="560" height="315" src="https://www.youtube.com/embed/vT-DElIaKtE?start=3760" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

