---
title: |
  Beyonce and Taylor Swift Lyrics
description: |
  Text analysis, `tf_idf`, Log odds ratio, Diverging bar graph, Lollipop graph
date: 2020-09-28
date-format: long
---

Notable topics: Text analysis, `tf_idf`, Log odds ratio, Diverging bar graph, Lollipop graph

Recorded on: 2020-09-28

Timestamps by: Eric Fletcher

[View code](https://github.com/dgrtwo/data-screencasts/blob/master/2020_09_29_taylor_swift_beyonce.Rmd)

## Full screencast

<iframe class="video" src="https://www.youtube.com/embed/vYbDyfv_v4Q" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

## Timestamps

<script id="timestamps" type="application-json">[{"timestamp_with_hours":"0:7:50","description":"Use `fct_reorder` from the `forcats` package to reorder `title` factor levels by sorting along the `sales` variable in `geom_col` plot.","functions":"fct_reorder","packages":"forcats","timestamp_sec":470},{"timestamp_with_hours":"0:8:10","description":"Use `labels = dollar` from the `scales` package to format the `geom_col` x-axis values as currency.","functions":"labels","packages":"scales","timestamp_sec":490},{"timestamp_with_hours":"0:11:15","description":"Use `rename_all(str_to_lower)` to convert variable names to lowercase.","functions":"rename_all | str_to_lower","packages":"dplyr | stringr","timestamp_sec":675},{"timestamp_with_hours":"0:12:45","description":"Use `unnest_tokens` from the `tidytext` package to split the lyrics into one-lyric-per-row.","functions":"unnest_tokens","packages":"tidytext","timestamp_sec":765},{"timestamp_with_hours":"0:13:00","description":"Use `anti_join` from the `tidytext` package to find the most common words int he lyrics without `stop_words`.","functions":"anti_join","packages":"dplyr","timestamp_sec":780},{"timestamp_with_hours":"0:15:15","description":"Use `bind_tf_idf` from the `tidytext` package to determine `tf` - the proportion each word has in each album and `idf` - how specific each word is to each particular album.","functions":"bind_tf_idf","packages":"tidytext","timestamp_sec":915},{"timestamp_with_hours":"0:17:45","description":"Use `reorder_within` with `scale_y_reordered` in order to reorder the bars within each `facet panel`. David replaces `top_n` with `slice_max` from the `dplyr` package in order to show the top 10 words with `ties = FALSE`.","functions":"reorder_within | scale_y_reordered | slice_max","packages":"tidytext | dplyr","timestamp_sec":1065},{"timestamp_with_hours":"0:20:45","description":"Use `bind_log_odds` from the `tidylo` package to calculate the `log odds ratio` of album and words, that is how much more common is the word in a specific album than across all the other albums.","functions":"bind_log_odds","packages":"tidylo","timestamp_sec":1245},{"timestamp_with_hours":"0:23:10","description":"Use `filter(str_length(word) <= 3)` to come up with a list in order to remove common filler words like `ah`, `uh`, `ha`, `ey`, `eeh`, and `huh`.","functions":"filter | str_length","packages":"dplyr | stringr","timestamp_sec":1390},{"timestamp_with_hours":"0:27:00","description":"Use `mdy` from the `lubridate` package and `str_remove(released, \" \\\\(.*)\"))` from the `stringr` package to parse the dates in the `released` variable.","functions":"distinct | mdy | str_remove","packages":"dplyr | lubridate | stringr","timestamp_sec":1620},{"timestamp_with_hours":"0:28:15","description":"Use `inner_join` from the `dplyr` package to join `taylor_swift_words` with `release_dates`. \n \n David ends up having to use `fct_recode` since the albums `reputation` and `folklore` were nor `lowercase` in a previous table thus excluding them from the `inner_join`.","functions":"inner_join | fct_recode","packages":"dplyr | forcats","timestamp_sec":1695},{"timestamp_with_hours":"0:28:30","description":"Use `fct_reorder` from the `forcats` package to reorder `album` factor levels by sorting along the `released` variable to be used in the `faceted` `geom_col`.","functions":"fct_reorder | geom_col","packages":"forcats | ggplot2","timestamp_sec":1710},{"timestamp_with_hours":"0:34:40","description":"Use `bind_rows` from hte `dplyr` package to bind `ts` with `beyonce` with `unnest_tokens` from the `tidytext` package to get one lyric per row per artist.","functions":"bind_rows | unnest_tokens","packages":"dplyr | tidytext","timestamp_sec":2080},{"timestamp_with_hours":"0:38:40","description":"Use `bind_log_odds` to figure out which words are more likely to come from a Taylor Swift or Beyonce song?","functions":"bind_log_odds","packages":"tidylo","timestamp_sec":2320},{"timestamp_with_hours":"0:41:10","description":"Use `slice_max` from the `dplyr` package to select the top 100 words by `num_words_total` and then the top 25 by `log_odds_weighted`. Results are used to create a diverging bar chart showing which words are most common between Beyonce and Taylor Swift songs.","functions":"slice_max | geom_col | ifelse | fct_reorder","packages":"dplyr | ggplot2 | forcats","timestamp_sec":2470},{"timestamp_with_hours":"0:44:40","description":"Use `scale_x_continuous` to make the `log_odds_weighted` scale more interpretable.","functions":"scale_x_continuous","packages":"ggplot2","timestamp_sec":2680},{"timestamp_with_hours":"0:50:45","description":"Take the previous plot and turn it into a `lollipop graph` with `geom_point(aes(size = num_words_total, color = direction))`","functions":"geom_col | geom_point | geom_vline","packages":"ggplot2","timestamp_sec":3045},{"timestamp_with_hours":"0:53:05","description":"Use `ifelse` to change the `1x` value on the x-axis to `same`.","functions":"ifelse","packages":"base","timestamp_sec":3185},{"timestamp_with_hours":"0:54:15","description":"Create a `geom_point` with `geom_abline` to show the most popular words they use in common.","functions":"pivot_wider | clean_names | geom_abline | geom_point | slice_max | scale_y_log_10 | scale_x_log_10 | geom_text","packages":"tidyr | ggplot2 | dplyr","timestamp_sec":3255},{"timestamp_with_hours":"1:01:55","description":"Summary of screencast.","timestamp_sec":3715}]</script>
