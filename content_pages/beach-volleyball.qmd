---
title: |
  Beach Volleyball
description: |
  Data cleaning, Logistic regression
date: 2020-05-18
date-format: long
---

Notable topics: Data cleaning, Logistic regression

Recorded on: 2020-05-18

Timestamps by: Eric Fletcher

[View code](https://github.com/dgrtwo/data-screencasts/blob/master/beach-volleyball.Rmd)

## Full screencast

<iframe class="video" src="https://www.youtube.com/embed/MfDdmsW3OMo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

## Timestamps

<script id="timestamps" type="application-json">[{"timestamp_with_hours":"0:5:30","description":"Use `pivot_longer` from the `dplyr` package to pivot the data set from `wide` to `long`.","functions":"pivot_longer","packages":"dplyr","timestamp_sec":330},{"timestamp_with_hours":"0:7:20","description":"Use `mutate_at` from the `dplyr` package with `starts_with` to change the class to `character` for all columns that start with `w_` and `l_`.","functions":"mutate_at","packages":"dplyr","timestamp_sec":440},{"timestamp_with_hours":"0:8:00","description":"Use `separate` from the `tidyr` package to separate the `name` variable into three columns with `extra = merge` and `fill = right`.","functions":"separate","packages":"tidyr","timestamp_sec":480},{"timestamp_with_hours":"0:10:35","description":"Use `rename` from the `dplyr` package to rename `w_player1`, `w_player2`, `l_player1`, and `l_player2`.","functions":"rename","packages":"dplyr","timestamp_sec":635},{"timestamp_with_hours":"0:12:50","description":"Use `pivot_wider` from the `dplyr` package to pivot the `name` variable from `long` to `wide`.","functions":"pivot_wider","packages":"dplyr","timestamp_sec":770},{"timestamp_with_hours":"0:15:15","description":"Use `str_to_upper` to convert the `winner_loser` `w` and `l` values to uppercase.","functions":"str_to_upper","packages":"stringr","timestamp_sec":915},{"timestamp_with_hours":"0:20:25","description":"Add unique row numbers for each match using `mutate` with `row_number` from the `dplyr` package.","functions":"row_number","packages":"dplyr","timestamp_sec":1225},{"timestamp_with_hours":"0:21:20","description":"Separate the `score` values into multiple rows using `separate_rows` from the `tidyr` package.","functions":"separate_rows","packages":"tidyr","timestamp_sec":1280},{"timestamp_with_hours":"0:22:45","description":"Use `separate` from the `tidyr` package to actual scores into two columns, one for the winners score `w_score` and another for the losers score `l_score`.","functions":"separate","packages":"tidyr","timestamp_sec":1365},{"timestamp_with_hours":"0:23:45","description":"Use `na_if` from the `dplyr` package to change the `Forfeit or other` value from the `score` variable to `NA`.","functions":"na_if","packages":"dplyr","timestamp_sec":1425},{"timestamp_with_hours":"0:24:35","description":"Use `str_remove` from the `stringr` package to remove scores that include `retired`.","functions":"str_remove","packages":"stringr","timestamp_sec":1475},{"timestamp_with_hours":"0:25:25","description":"Determine how many times the winners score `w_score` is  greter than the losers score `l_score` at least 1/3 of the time.","functions":"mutate | group_by | summarize","packages":"dplyr","timestamp_sec":1525},{"timestamp_with_hours":"0:28:30","description":"Use `summarize` from the `dplyr` package to create the summary statistics including the `number of matches`, `winning percentage`, `date of first match`, `date of most recent match`.","functions":"summarize","packages":"dplyr","timestamp_sec":1710},{"timestamp_with_hours":"0:34:15","description":"Use `type_convert` from the `readr` package to convert `character` class variables to `numeric`.","functions":"type_convert","packages":"readr","timestamp_sec":2055},{"timestamp_with_hours":"0:35:00","description":"Use `summarize_all` from the `dplyr` package to calculate the calculate which fraction of the data is not `NA`.","functions":"summarize_all","packages":"dplyr","timestamp_sec":2100},{"timestamp_with_hours":"0:42:00","description":"Use `summarize` from the `dplyr` package to determine players `number of matches`, `winning percentage`, `average attacks`, `average errors`, `average kills`, `average aces`, `average serve errors`, and `total rows with data` for years prior to 2019. \n\nThe summary statistics are then used to answer how would we could predict if a player will win in 2019 using `geom_point` and `logistic regression`. Initially, David wanted to predict performance based on players first year performance. (NOTE - David mistakingly grouped by `year` and `age`. He cathces this around 1:02:00.)","functions":"summarize | inner_join | geom_point | glm |cbind","packages":"dplyr | ggplot2","timestamp_sec":2520},{"timestamp_with_hours":"0:49:25","description":"Use  `year` from the `lubridate` package within a `group_by` to determine the `age` for each play given their `birthdate`.","functions":"summarize | year","packages":"lubridate","timestamp_sec":2965},{"timestamp_with_hours":"0:54:30","description":"Turn the summary statistics at timestamp `42:00` into a `.` DOT `%>%` PIPE function.","timestamp_sec":3270},{"timestamp_with_hours":"1:04:30","description":"Summary of screencast.","timestamp_sec":3870}]</script>
