---
title: |
  Friends
description: |
  Data Manipulation, Linear Modeling, Pairwise Correlation, Text Mining
date: 2020-09-07
date-format: long
---

Notable topics: Data Manipulation, Linear Modeling, Pairwise Correlation, Text Mining

Recorded on: 2020-09-07

Timestamps by: Eric Fletcher

[View code](https://github.com/dgrtwo/data-screencasts/blob/master/2020_09_08_friends.Rmd)

## Full screencast

<iframe class="video" src="https://www.youtube.com/embed/bgcBEBqVnx8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

## Timestamps

<script id="timestamps" type="application-json">[{"timestamp_with_hours":"0:7:30","description":"Use `dplyr` package's `count` function to count the unique values of multiple variables.","functions":"count","packages":"dplyr","timestamp_sec":450},{"timestamp_with_hours":"0:9:35","description":"Use `geom_col` to show how many lines of dialogue there is for each character. Use `fct_reorder` to reorder the `speaker` factor levels by sorting along `n`.","functions":"geom_col | fct_reorder","packages":"ggplot | forcats","timestamp_sec":575},{"timestamp_with_hours":"0:12:07","description":"Use `semi_join` to join `friends` dataset with `main_cast` with `by = \"speaker` returning all rows from `friends` with a match in `main_cast`.","functions":"semi_join","packages":"dplyr","timestamp_sec":727},{"timestamp_with_hours":"0:12:30","description":"Use `unite` to create the `episode_number` variable which pastes together `season` and `episode` with `sep = \".\"`.\n\nThen, use `inner_join` to combine above dataset with `friends_info` with `by = c(\"season\", \"episode\")`. \n\nThen, use `mutate` and the `glue` package instead to combine `{ season }.{ episode } { title }`.\n\nThen use `fct_reorder(episode_title, season + .001 * episode)`  to order it by `season` first then `episode`.","functions":"unite | inner_join | glue | fct_reorder","packages":"tidyr | glue |forcats","timestamp_sec":750},{"timestamp_with_hours":"0:15:45","description":"Use `geom_point` to visualize `episode_title` and `us_views_millions`. \n\nUse `as.integer` to change `episode_title` to integer class. \n\nAdd labels to `geom_point` using `geom_text` with `check_overlap = TRUE` so text that overlaps previous text in the same layer will not be plotted.","functions":"geom_point | as.integer | geom_text | geom_line","packages":"ggplot | base","timestamp_sec":945},{"timestamp_with_hours":"0:19:95","description":"Run the above plot again using `imdb_rating` instead of `us_views_millions`","functions":"geom_point | as.integer | geom_text | geom_line","packages":"ggplot | base","timestamp_sec":1235},{"timestamp_with_hours":"0:21:35","description":"Ahead of modeling:\n\nUse `geom_boxplot` to visualize the distribution of speaking for main characters.\n\nUse the `complete` function with `fill = list(n = 0)` to replace existing explicit missing values in the data set.\n\nDemonstration of how to account for missing `imdb_rating` values using the `fill` function with `.direction = \"downup\"` to keep the imdb rating across the same title.","functions":"semi_join | geom_boxplot | coord_flip | fct_reorder | complete | fill | scale_x_log10","packages":"dplyr | ggplot | forcats | tidyr | tidyr","timestamp_sec":1295},{"timestamp_with_hours":"0:26:45","description":"Ahead of modeling:\n\nUse `summarize` with `cor(log2(n), imdb_rating)` to find the correlation between speaker and imdb rating -- the fact that the correlation is positive for all speakers gives David a suspicion that some episodes are longer than others because they're in 2 parts with higher ratings due to important moments. David addresses this `confounding factor` by including `percentage of lines` instead of `number of lines`.  \n\nVisualize results with `geom_boxplot`, `geom_point` with `geom_smooth`.","functions":"semi_join | summarize | add_count | geom_boxplot | geom_smooth | geom_point","packages":"dplyr | ggplot","timestamp_sec":1605},{"timestamp_with_hours":"0:34:05","description":"Use a `linear model` to predict imdb rating based on various variables.","functions":"spread | across | semi_join | lm | aov","packages":"tidyr | dplyr | stats","timestamp_sec":2045},{"timestamp_with_hours":"0:42:00","description":"Use the `tidytext` and `tidylo` packages to see what words are most common amongst characters, and whether they are said more times than would be expected by chance. \n\nUse `geom_col` to visualize the most overrepresented words per character according to `log_odds_weighted`.","functions":"unnest_tokens | anti_join | bind_log_odds | semi_join | geom_col | scale_y_reordered","packages":"tidytext | tidylo | ggplot","timestamp_sec":2520},{"timestamp_with_hours":"0:54:15","description":"Use the `widyr` package and `pairwise correlation` to determine which characters tend to appear in the same scences together? \n\nUse `geom_col` to visualize the correlation between characters.","functions":"unite | semi_join | pairwise_corr","packages":"widyr | tidyr","timestamp_sec":3255},{"timestamp_with_hours":"1:00:25","description":"Summary of screencast.","timestamp_sec":3625}]</script>
