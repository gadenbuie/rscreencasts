---
title: "African-American Achievements"
description: "`plotly` interactive timeline, Wikipedia web scraping"
date: 2020-06-09
date-format: long
---

Notable topics: `plotly` interactive timeline, Wikipedia web scraping

Recorded on: 2020-06-09

Timestamps by: Eric Fletcher

[View code](https://github.com/dgrtwo/data-screencasts/blob/master/african-american-achievements.Rmd)

## Full screencast
<iframe width="560" height="315" src="https://www.youtube.com/embed/-W-OopvhNPo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

## Timestamps

### 0:8:20

Use ` fct_reorder` from the `forcats` package to reorder the `category` factor levels by sorting along  `n`.

fct_reorder

forcats



<iframe width="560" height="315" src="https://www.youtube.com/embed/-W-OopvhNPo?start=500" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:11:35

Use `str_remove` from the `stringr` package to remove anything after a bracket or parenthesis from the `person` variable with the `regular expression` `"[\\[\\(].*"` David then discusses how web scraping may be a better option than parsing the strings.

str_remove

stringr



<iframe width="560" height="315" src="https://www.youtube.com/embed/-W-OopvhNPo?start=695" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:12:25

Use `str_trim` from the `stringr` package to remove the `whitespace` from the `person` variable. David then discusses how web scraping may be a better option than parsing the strings.

str_trim

stringr



<iframe width="560" height="315" src="https://www.youtube.com/embed/-W-OopvhNPo?start=745" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:15:50

Create an interactive `plotly` timeline.

ggplotly

plotly



<iframe width="560" height="315" src="https://www.youtube.com/embed/-W-OopvhNPo?start=950" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:18:20

Use `ylim(c(-.1, 1))` to set scale limits moving the `geom_point` to the bottom of the graph.

ylim

ggplot2



<iframe width="560" height="315" src="https://www.youtube.com/embed/-W-OopvhNPo?start=1100" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:19:30

Use `paste0` from `base R` to concatenate the `accomplishment` and `person` with `": "` in between the two displayed in the timeline hover label.

paste0

base



<iframe width="560" height="315" src="https://www.youtube.com/embed/-W-OopvhNPo?start=1170" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:20:30

Set `y` to `category` in `ggplot` `aesthetics` to get 8 separate timelines on one plot, one for each category. Doing this allows David to remove the `ylim` mentioned above.

aes

ggplot2



<iframe width="560" height="315" src="https://www.youtube.com/embed/-W-OopvhNPo?start=1230" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:22:25

Use the `plotly` `tooltip = text` parameter to get just a single line of text in the `plotly` hover labels.

tooltip

plotly



<iframe width="560" height="315" src="https://www.youtube.com/embed/-W-OopvhNPo?start=1345" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:26:05

Use `glue` from the `glue` package to reformat `text` with `\n` included so that the single line of text can now be broken up into 2 separate lines in the hover labels.

glue

glue



<iframe width="560" height="315" src="https://www.youtube.com/embed/-W-OopvhNPo?start=1565" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:33:55

Use `separate_rows` from the `tidyr` package to separate the `occupation_s` variable from the `science` dataset into multiple columns delimited by a semicolon with `sep = "; "`

separate_rows

tidyr



<iframe width="560" height="315" src="https://www.youtube.com/embed/-W-OopvhNPo?start=2035" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:34:25

Use `str_to_title` from the `stringr` package to conver the case to title case in the `occupation_s` variable.

str_to_title

stringr



<iframe width="560" height="315" src="https://www.youtube.com/embed/-W-OopvhNPo?start=2065" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:35:15

Use `str_detect` from the `stringr` package to detect the presence of `statistician` from within the `occupation_s` variable with `regex("statistician", ignore_case = TRUE)` to perform a case-insensitive search.

str_detect

stringr



<iframe width="560" height="315" src="https://www.youtube.com/embed/-W-OopvhNPo?start=2115" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:41:55

Use the `rvest` package with `Selector Gadget`  to scrape additional information about the individual from their `Wikipedia` infobox.

read_html | html_nodes | html_table | setNames

rvest



<iframe width="560" height="315" src="https://www.youtube.com/embed/-W-OopvhNPo?start=2515" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:49:15

Use `map` and `possibly` from the `purrr` package to separate out the downloading of data from parsing the useful information. David then turns the infobox extraction step into an `anonymous function` using `.%>%` dot-pipe.

map | possibly | read_html

purrr



<iframe width="560" height="315" src="https://www.youtube.com/embed/-W-OopvhNPo?start=2955" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:58:40

Summary of screencast.

NA

NA



<iframe width="560" height="315" src="https://www.youtube.com/embed/-W-OopvhNPo?start=3520" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

