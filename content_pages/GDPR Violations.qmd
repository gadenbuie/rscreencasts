---
title: "GDPR Violations"
description: "Data manipulation, Interactive dashboard with `shinymetrics` and `tidymetrics`"
date: 2020-04-21
date-format: long
---

Notable topics: Data manipulation, Interactive dashboard with `shinymetrics` and `tidymetrics`

Recorded on: 2020-04-21

Timestamps by: Eric Fletcher

[View code](https://github.com/dgrtwo/data-screencasts/blob/master/gdpr.Rmd)

## Full screencast
<iframe class="video" src="https://www.youtube.com/embed/EVvnnWKO_4w" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

## Timestamps

### 0:4:05

Use the `mdy` function from the `lubridate` package to change  the date variable from `character` class to `date` class.

mdy

lubridate



<iframe class="video" src="https://www.youtube.com/embed/EVvnnWKO_4w?start=245" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:5:35

Use the `rename` function from the `dplyr` package to rename variable in the dataset.

rename

dplyr



<iframe class="video" src="https://www.youtube.com/embed/EVvnnWKO_4w?start=335" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:6:15

Use the `fct_reorder` function from the `forcats` package to  sort the `geom_col` in descending order.

fct_reorder

forcats



<iframe class="video" src="https://www.youtube.com/embed/EVvnnWKO_4w?start=375" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:6:30

Use the `fct_lump` function from the `forcats` package within `count`  to  lump together  country names except for the 6 most frequent.

fct_lump | count

forcats | dplyr



<iframe class="video" src="https://www.youtube.com/embed/EVvnnWKO_4w?start=390" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:7:05

Use the `scale_x_continuous` function from `ggplot2`  with the `scales` package to change the x-axis values to dollar format.

scale_x_continuous

ggplot2 | scales



<iframe class="video" src="https://www.youtube.com/embed/EVvnnWKO_4w?start=425" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:8:15

Use the `month` and `floor_date`  function from the `lubridate` package to get the month component from the `date` variable to count the total fines per month.

month

lubridate



<iframe class="video" src="https://www.youtube.com/embed/EVvnnWKO_4w?start=495" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:8:55

Use the `na_if` function from the `dplyr` package to convert specific date value to `NA`.

na_if

dplyr



<iframe class="video" src="https://www.youtube.com/embed/EVvnnWKO_4w?start=535" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:11:05

Use the `fct_reorder` function from the `forcats` package to sort the stacked `geom_col` and legend labels in descending order.

fct_reorder

forcats | dplyr



<iframe class="video" src="https://www.youtube.com/embed/EVvnnWKO_4w?start=665" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:15:15

Use the `dollar` function from the `scales` package to convert the `price` variable into dollar format.

dollar

scales



<iframe class="video" src="https://www.youtube.com/embed/EVvnnWKO_4w?start=915" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:15:40

Use the `str_trunc` to shorten the `summary` string values to 140 characters.

str_trunc

stringr



<iframe class="video" src="https://www.youtube.com/embed/EVvnnWKO_4w?start=940" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:17:35

Use the `separate_rows` function from the `tidyr` package with a `regular expression` to separate the values in the `article_violated` variable with each matching group placed in its own row.

separate_rows

tidyr



<iframe class="video" src="https://www.youtube.com/embed/EVvnnWKO_4w?start=1055" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:19:30

Use the `extract` function from the `tidyr` package with a `regular expression` to turn each matching group into a new column.

extract

tidyr



<iframe class="video" src="https://www.youtube.com/embed/EVvnnWKO_4w?start=1170" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:27:30

Use the `geom_jitter` function from the `ggplot2` package to add points to the horizontal box plot.

geom_jitter

ggplot2



<iframe class="video" src="https://www.youtube.com/embed/EVvnnWKO_4w?start=1650" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:31:55

Use the `inner_join` function from the `dplyr` package to join together  `article_titles` and `separated_articles` tables.

inner_join

dplyr



<iframe class="video" src="https://www.youtube.com/embed/EVvnnWKO_4w?start=1915" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:32:55

Use the `paste0` function from `base R` to concatenate `article` and `article_title`.

paste0

base R



<iframe class="video" src="https://www.youtube.com/embed/EVvnnWKO_4w?start=1975" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:38:48

Use the `str_detect` function from the `stringr` package to detect the presence of a pattern in a string.

str_detect

stringr



<iframe class="video" src="https://www.youtube.com/embed/EVvnnWKO_4w?start=2328" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:40:25

Use the `group_by` and `summarize` functions from the `dplyr` package to aggregate fines that were issued to the same country on the same day allowing for size to be used in `geom_point` plot.

group_by | summarize | geom_point

dplyr | ggplot2



<iframe class="video" src="https://www.youtube.com/embed/EVvnnWKO_4w?start=2425" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:41:14

Use the `scale_size_continuous` function from the `ggplot2` package to remove the size legend.

ggplot2

ggplot2



<iframe class="video" src="https://www.youtube.com/embed/EVvnnWKO_4w?start=2474" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:42:55

Create an interactive dashboard using the `shinymetrics` and `tidymetrics` which is [a tidy approach to business intelligence](https://github.com/datacamp/tidymetrics).

preview_metric

tidymetrics | shinymetrics



<iframe class="video" src="https://www.youtube.com/embed/EVvnnWKO_4w?start=2575" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

### 0:47:25

Use the `cross_by_dimensions` and `cross_by_periods` functions from the `tidyr` package which stacks an extra copy of the table for each dimension specified as an argument (`country`, `article_title`, `type`), replaces the value of the column with the word `All` and `periods`, and groups by all the columns. It acts as an extended group_by that allows complete summaries across each individual dimension and possible combinations.

cross_by_dimensions | cross_by_periods | use_metrics_scaffold | create_metrics

tidyr



<iframe class="video" src="https://www.youtube.com/embed/EVvnnWKO_4w?start=2845" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

