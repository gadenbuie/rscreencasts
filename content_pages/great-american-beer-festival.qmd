---
title: |
  Great American Beer Festival
description: |
  Log odds ratio, Logistic regression, TIE Fighter plot
date: 2020-10-19
date-format: long
---

Notable topics: Log odds ratio, Logistic regression, TIE Fighter plot

Recorded on: 2020-10-19

Timestamps by: Eric Fletcher

[View code](https://github.com/dgrtwo/data-screencasts/blob/master/2020_10_20_beer_awards.Rmd)

## Full screencast

<iframe class="video" src="https://www.youtube.com/embed/BV_afpCDQ70" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

## Timestamps

<script id="timestamps" type="application-json">[{"timestamp_with_hours":"0:8:20","description":"Use `pivot_wider` with `values_fill = list(value =0))` from the `tidyr` package along with `mutate(value = 1)` to pivot the `medal` variable from `long` to `wide` adding a 1 for the medal type awarded and 0 for the remaining medal types in the row.","functions":"pivot_wider","packages":"tidyr","timestamp_sec":500},{"timestamp_with_hours":"0:11:25","description":"Use `fct_lump` from the `forcats` package to lump together all the beers except for the N most frequent.","functions":"fct_lump","packages":"forcats","timestamp_sec":685},{"timestamp_with_hours":"0:12:25","description":"Use `str_to_upper` from the `stringr` package to convert the case of the `state` variable to uppercase.","functions":"str_to_upper","packages":"stringr","timestamp_sec":745},{"timestamp_with_hours":"0:12:25","description":"Use `fct_relevel` from the the `forcats` package in order to reorder the `medal` factor levels.","functions":"fct_relevel","packages":"forcats","timestamp_sec":745},{"timestamp_with_hours":"0:13:25","description":"Use `fct_reorder` from the `forcats` package to sort `beer_name` factor levels by sorting along `n`.","functions":"fct_reorder","packages":"forcats","timestamp_sec":805},{"timestamp_with_hours":"0:14:30","description":"Use `glue` from the `glue` package to concatenate `beer_name` and `brewery` on the y-axis.","functions":"glue","packages":"glue","timestamp_sec":870},{"timestamp_with_hours":"0:15:00","description":"Use `ties.mthod = \"first\" ` within `fct_lump` to show only the first `brewery` when a tie exists between them.","functions":"fct_lump","packages":"forcats","timestamp_sec":900},{"timestamp_with_hours":"0:19:25","description":"Use `setdiff` from the `dplyr` package and the `state.abb` built in vector from the `datasets` package  to check which states are missing from the dataset.","functions":"state.abb | setdiff","packages":"datasets","timestamp_sec":1165},{"timestamp_with_hours":"0:21:25","description":"Use `summarize` from the `dplyr` package to calculate the `number of medals` with `n_medals = n()`, `number of beers` with `n_distinct`, `number of gold medals` with `sum()`, and `weighted medal totals` using `sum(as.integer()` because `medal` is an ordered factor, so 1 for each bronze, 2 for each silver, and 3 for each gold.","functions":"summarize","packages":"dplyr","timestamp_sec":1285},{"timestamp_with_hours":"0:26:05","description":"Import `Craft Beers Dataset` from `Kaggle` using `read_csv` from the `readr` package.","functions":"read_csv","packages":"readr","timestamp_sec":1565},{"timestamp_with_hours":"0:28:00","description":"Use `inner_join` from the `dplyr` package to join together the 2 datasets from `kaggle`.","functions":"inner_join","packages":"dplyr","timestamp_sec":1680},{"timestamp_with_hours":"0:29:40","description":"Use `semi_join` from the `dplyr` package to join together to see if the beer names match with the `kaggle` dataset.  Ends up at a dead end with not enough matches between the datasets.","functions":"semi_join","packages":"dplyr","timestamp_sec":1780},{"timestamp_with_hours":"0:33:05","description":"Use `bind_log_odds` from the `tidylo` package to show the representation of each beer category for each state compared to the categories across the other states.","functions":"bind_log_odds","packages":"tidylo","timestamp_sec":1985},{"timestamp_with_hours":"0:33:35","description":"Use `complete` from the `tidyr` package in order to turn missing values into explicit missing values.","functions":"complete","packages":"tidyr","timestamp_sec":2015},{"timestamp_with_hours":"0:35:30","description":"Use `reorder_within` from the `tidytext` package and `scale_y_reordered` from the `tidytext` package in order to reorder the bars within each facet panel.","functions":"reorder_within | scale_y_reordered | facet_wrap","packages":"tidytext","timestamp_sec":2130},{"timestamp_with_hours":"0:36:40","description":"Use `fct_reorder` from the `forcats` package to reorder the `facet panels` in descending order.","functions":"fct_reorder","packages":"forcats","timestamp_sec":2200},{"timestamp_with_hours":"0:39:35","description":"For the previous plot, use `fill = log_odds_weighted > 0` in the `ggplot` `aes` argument to highlight the positive and negative values.","functions":"fill","packages":"ggplot2","timestamp_sec":2375},{"timestamp_with_hours":"0:41:45","description":"Use `add_count` from the `dplyr` package to add a `year_total` variable which shows the total awards for each year. Then use this to calculate the percent change in totals medals per state using `mutate(pct_year = n / year)`","functions":"add_count | mutate","packages":"dplyr","timestamp_sec":2505},{"timestamp_with_hours":"0:44:40","description":"Use `glm` from the `stats` package to create a `logistic regression` model to find out if their is a statistical trend in the probability of award success over time.","functions":"glm | cbind","packages":"stats","timestamp_sec":2680},{"timestamp_with_hours":"0:47:15","description":"Exapnd on the previous model by using the `broom` package to fit multiple `logistic regressions` across multiple states instead of doing it for an individual state at a time.","functions":"group_by | summarize | list | glm|mutate | map","packages":"broom | purrr","timestamp_sec":2835},{"timestamp_with_hours":"0:50:25","description":"Use `conf.int = TRUE` to add `confidence bounds` to the `logistic regression` output then use it to create a `TIE Fighter` plot to show which states become more or less frequent medal winners over time.","functions":"conf.int","timestamp_sec":3025},{"timestamp_with_hours":"0:53:00","description":"Use the `state.name` dataset with `match` from `base r`  to change state abbreviation to the state name.","functions":"state.name | match","packages":"datasets","timestamp_sec":3180},{"timestamp_with_hours":"0:55:00","description":"Summary of screencast.","timestamp_sec":3300}]</script>
